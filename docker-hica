#!/usr/bin/python -tt
# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# HICA - Host integrated container applications
#
# MIT License (C) 2015

import os, sys, docker, argparse, imp, subprocess
from base import *

# create docker client for inspecting images
dock = docker.Client()

_injector_type = 'HicaInjector'
_injector_registry = {}

# adjust for container arguments passed after the -- delimeter
container_args = []
sliceat = 0
for i, arg in enumerate(sys.argv[1:]):
  if sliceat:
    container_args.append(arg)
  if arg == '--':
    sliceat = i + 1

if sliceat:
  sys.argv = sys.argv[:sliceat]

def HicaTestSingleGuest(injector, spec, image):
  rc = subprocess.call(['docker', 'run', '--entrypoint', '/bin/sh', image, '-c', spec])
  if rc > 0:
    print('*** Guest test failed for injector {0}!'.format(injector))
    print('    ' + spec)
    sys.exit(rc)

def HicaTestSingleHost(injector, spec):
  rc = subprocess.call(['/bin/sh', '-c', spec])
  if rc > 0:
    print('*** Host test failed for injector {0}!'.format(injector))
    print('    ' + spec)
    sys.exit(rc)

def HicaFindSubLabels(prefix, labels):
  found = {}
  for k, v in labels:
    if k == prefix:
      pass
    if k.startswith(prefix):
      found[k[len(prefix):]] = v 
  return found

def HicaModuleFindInjectors(module):
  """ Find injectors in the given module

  :param module: Loaded module
  :type module: imp.Module
  """
  injectors = []
  for n in dir(module):
    attr = getattr(module, n)
    if hasattr(attr, '__base__') and attr.__base__.__name__ == _injector_type:
      injectors.append(attr)
  return injectors

def HicaLoadInjectors(path):
  """ Load all Python modules from `path`

  :param path: Relative path to module directory
  "type path: str
  """

  r = {}
  for inj in os.listdir(os.path.join(os.getcwd(), path)):
    modname, suffix = inj.rsplit('.', 1)
    if suffix == 'py':
      fullpath = os.path.join(os.getcwd(), path)
      f, filename, description = imp.find_module(modname, [fullpath])
      m = imp.load_module(modname, open(filename, 'U'), filename, description)
      try:
        injs = HicaModuleFindInjectors(m)
        for i in injs:
          obj = i()
          r[obj.get_config_key()] = obj
      except AttributeError:
        print ("Module {0} does not implement `register(context)`".format(modname))
  return r

def HicaGetBaseArgparse():
  """ Provides with common `argparse` settings  """

  args = argparse.ArgumentParser()
  args.add_argument("hica_app_name")
  args.add_argument("--show-args", help='show possible arguments for the specified "hica_app_name"', default=False, action='store_true')
  args.add_argument("--test-injectors", help='executes injector tests for specified "hica_app_name"', default=False, action='store_true')
  args.add_argument("--verbose", help='print additional information', default=False, action='store_true')
  args.add_argument("--yes", help='bypass the capability review check', default=False, action='store_true')
  args.add_argument("--user", help="user:group to run as ({0}:{0})".format(str(os.getuid())), default='{0}:{0}'.format(str(os.getuid())))
  return args

def HicaGetImageName():
  """ Get image name so that we can fetch labels from it """

  args = HicaGetBaseArgparse()
  p, _ = args.parse_known_args()
  return p.hica_app_name

def HicaGetLabelsFromImage(image):
  """ Get labels from image as list

  :param image: Docker image
  :type image: dict
  """

  return [(k, v) for (k, v) in image['Config']['Labels'].iteritems()]

def HicaParseArguments(labels):
  """ Parse argument and optionally show usage and terminate with `0`
  return code

  :param labels: `Labels` read from the `Image`
  :type labels: list(str)
  """

  args = HicaGetBaseArgparse()
  # parse now to catch --show-args
  p, _ = args.parse_known_args()

  # add needed argparsers
  for label in labels:
    if label[0] in _injector_registry:
      inj = _injector_registry[label[0]]
      for (arg, typ, defval) in inj.get_injected_args():
        if arg:
          args.add_argument(arg, default=defval)

  # now that we added the argparsers we can print usage and bail
  if p.show_args:
    args.print_usage()
    sys.exit(0)

  # test injectors
  if p.test_injectors:
    guest, host = [], []
    for label in labels:
      if label[0].endswith('.test.guest'):
        l = label[0][:len(label[0])-11]
        guest.append((l, label[1]))
      elif label[0].endswith('.test.host'):
        l = label[0][:len(label[0])-10]
        host.append((l, label[1]))

    for (lbl, spec) in guest:
      HicaTestSingleGuest(lbl, spec, "hha:latest")

    for (lbl, spec) in host:
      HicaTestSingleHost(lbl, spec)

    print(guest)
    print(host)
    sys.exit(0)

  return args.parse_args()

def HicaInjectConfiguration(labels, args, config):
  """ Inject configuration parameters for `labels` with values
  obtained from `args` into the `config` array

  :param labels: `Labels` read from the `Image`
  :type labels: list(str)
  :param args: Result of `parse_args` operation
  :type args: argparse.ArgumentParser
  :param config: Array where to inject configuration parameters
  :type config: list(str)
  """

  caps = []
  # map params from argparse back to injectors
  for label in labels:
    if label[0] in _injector_registry:
      inj = _injector_registry[label[0]]
      cfgs = []
      sub = HicaFindSubLabels(label[0], labels)
      if '.description' in sub:
        caps.append(sub['.description'])
      caps.append(inj.get_description())
      for (arg, typ, defval) in inj.get_injected_args():
        if arg:
          x = getattr(args, arg[2:].replace("-", "_"))
          cfgs.append((typ, x))
        else:
          cfgs.append((typ, defval))
      inj.inject_config(config, cfgs)

  instr = "The container requests the following capabilities: \n - " + "\n - ".join(caps) + "\nProceed? [y/Y/n]: "
  if args.yes or not caps or raw_input(instr) in ['y', 'Y']:
    return config
  else:
    print("*** Operation aborted!")
    sys.exit(1)

def HicaGetImages(images):
  """ Gets a list of all image names

  :param images: all docker images
  :type images: dict
  """
  tags = filter(lambda y: y != [u'<none>:<none>'], [x['RepoTags'] for x in images])
  return set([a for b in tags for a in b])

_injector_registry = HicaLoadInjectors("injectors")

name = HicaGetImageName()
images = HicaGetImages(dock.images(all=True))

# search for the image, also try the default 'latest' tag
if name not in images and (name + ":latest") not in images:
  print("*** Image '{0}' not found locally, bailing!".format(name))
  print(images)
  sys.exit(1)

image = dock.inspect_image(name)

labels = HicaGetLabelsFromImage(image)
parsed = HicaParseArguments(labels)
# base configuration
# run the container as current user so that file system rights are fine
# for bind mounted files
config = HicaInjectConfiguration(labels, parsed, ['-i', '-u', parsed.user])
runcmd = ["docker", "run"] + config + [name] + container_args

if parsed.verbose:
  print("Executing: " + " ".join(runcmd))

p = subprocess.Popen(runcmd, stdin=sys.stdin)
out, err = p.communicate()
